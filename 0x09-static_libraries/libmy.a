!<arch>
0-isupper.c/    0           0     0     644     211       `
#include "main.h"

/**
 * _isupper - checks for uppercase character
 * @c: character to check
 * Return: 0
 */

int _isupper(int c)
{

	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);

	}
}

0-memeset.c/    0           0     0     644     292       `
#include "main.h"

/**
 * *_memset - function that fills memory with constant byte
 * @s: pointer
 * @b: value to be set
 * @n: bytes of memory
 * Return: s
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		*(s + i) = b;
	}

	return (s);
}
0-strcat.c/     0           0     0     644     357       `
#include "main.h"

/**
 * _strcat - A function that concatenates two strings
 * @dest: string to be appended to
 * @src: string to add
 * Return: Dest
 */

char *_strcat(char *dest, char *src)
{
	int i, j;

	i = 0;
	j = 0;

	while (dest[i] != '\0')
		i++;

	while (src[j] != '\0')
	{
		dest[i] = src[j];
		j++;
		i++;
	}
	dest[i] = '\0';

	return (dest);
}

1-isdigit.c/    0           0     0     644     216       `
#include "main.h"

/**
 * _isdigit - function that checks for a digit through 0 and 9
 * @c: a digit
 * Return: 0
 */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
1-memcpy.c/     0           0     0     644     313       `
#include "main.h"

/**
 * *_memcpy - function that copies memory area
 * @dest: memory area
 * @src: memory area
 * @n: bytes of memory
 * Return: dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	i = 0;
	while (i < n)
	{
		*(dest + i) = *(src + i);
		i++;
	}

	return (dest);
}

1-strncat.c/    0           0     0     644     420       `
#include "main.h"

/**
 * _strncat - concatenates n bytes from a string to another
 * @dest: destination string
 * @src: source string
 * @n: number of bytes of str to concatenate
 * Return: Dest
 */

char *_strncat(char *dest, char *src, int n)
{
	int i, j;

	i = 0;
	j = 0;

	while (dest[i] != '\0')
		i++;

	while (src[i] != '\0' && j < n)
	{
		dest[i] = src[j];
		i++;
		j++;
	}

	dest[i] = '\0';

	return (dest);
}
100-atoi.c/     0           0     0     644     591       `
#include "main.h"

/**
 * _atoi - converts a string to an integer
 * @s: string to be converted
 * Return: the int converted from the string
 */

int _atoi(char *s)
{
	int i, d, n, len, f, digit;

	i = 0;
	d = 0;
	n = 0;
	len = 0;
	f = 0;
	digit = 0;

	while (s[len] != '\0')
		len++;

	while (i < len && f == 0)
	{
		if (s[i] == '-')
			++d;

		if (s[i] >= '0' && s[i] <= '9')
		{
			digit = s[i] - '0';
			if (d % 2)
				digit = -digit;
			n = n * 10 + digit;
			f = 1;
			if (s[i + 1] < '0' || s[i + 1] > '9')

				break;
			f = 0;
		}
		i++;
	}
	if (f == 0)
		return (0);
	return (n);
}

2-strchr.c/     0           0     0     644     290       `
#include "main.h"

/**
 * *_strchr - function that locates a character in a string
 * @s:string
 * @c: character
 * Return: pointer
 */

char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
		{
			return (s);
		}
		++s;
	}
	if (*s == c)
	{
		return (s);
	}
	return (0);
}
2-strlen.c/     0           0     0     644     222       `
#include "main.h"

/**
 * _strlen - returns the length of a string
 * @s: pointer variable
 * Return: returns i in this case
 */

int _strlen(char *s)
{
	int i;

	i = 0;

	while (s[i] != '\0')
	{
		i++;
	}

	return (i);
}
2-strncpy.c/    0           0     0     644     371       `
#include "main.h"

/**
 * _strncpy - copies a string
 * @dest: destination string
 * @src: source string
 * @n: number of n bytes
 * Return: pointer to resulting string
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	i = 0;

	while (src[i] != '\0' && i < n)
	{
		dest[i] = src[i];
		i++;
	}

	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}

	return (dest);
}

3-islower.c/    0           0     0     644     219       `
#include "main.h"

/**
 * _islower - checks for lowercase character
 * @c: Single letter input
 * Return: Always 0 if successful
 */

int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);
}

3-puts.c/       0           0     0     644     217       `
#include "main.h"

/**
 * _puts - function that prints a string to stdout
 * @str: pointer variable
 */

void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     289       `
#include "main.h"

/**
 * _strcmp - compares two strings
 * @s1: first string to be compared
 * @s2: second string to be compared
 * Return: 0
 */

int _strcmp(char *s1, char *s2)
{
	while (*s1 == *s2)
	{
		if (*s1 == '\0')
		{
			return (0);
		}
		s1++;
		s2++;
	}
	return (*s1 - *s2);
}

3-strspn.c/     0           0     0     644     520       `
#include "main.h"

/**
 * _strspn - Function that gets the length of a prefix
 * @accept: pointer containing bytes
 * @s: consist of bytes from accept
 * Return: count
 */

unsigned int _strspn(char *s, char *accept)
{
	int i, j;
	int count = 0;

	char *str1, *str2;

	str1 = s;
	str2 = accept;

	i = 0;

	while (str1[i] != '\0')
	{
		j = 0;

		while (str2[j] != '\0')
		{
			if (str2[j] == str1[i])
			{
				count++;

				break;
			}
			j++;
		}

		if (s[i] != accept[j])
		{
			break;
		}
		i++;
	}
	return (count);
}
4-isalpha.c/    0           0     0     644     294       `
#include "main.h"

/**
 * _isalpha - a function that checks for alphabetic character
 *
 * @c: single letter input
 *
 * Return: if c is upper or lower letter 1 else 0
 */

int _isalpha(int c)
{
	if (((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z')))
		return (1);
	else
		return (0);
}
4-strpbrk.c/    0           0     0     644     367       `
#include "main.h"

/**
 * *_strpbrk - Function that searches a string for any of set of bytes
 * @s: String to be scanned
 * @accept: contains bytes
 * Return: 0
 */

char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s != '\0')
	{
		i = 0;
		while (accept[i] != '\0')
		{
			if (*s == accept[i])
			{
				return (s);
			}
			i++;
		}
		s++;
	}
	return (0);
}

5-strstr.c/     0           0     0     644     471       `

#include "main.h"

/**
 * _strstr - Function that locates a substring
 * @haystack: contains needle
 * @needle: contains forst occurence
 * Return: 0
 */

char *_strstr(char *haystack, char *needle)
{
	char *str1, *str2;

	while (*haystack != '\0')
	{
		str1 = haystack;
		str2 = needle;

		while (*haystack != '\0' && *str2 != '\0' && *haystack == *str2)
		{
			haystack++;
			str2++;
		}
		if (*str2 == '\0')
			return (str1);
		haystack = str1 + 1;
	}
	return (0);
}

6-abs.c/        0           0     0     644     192       `
#include "main.h"
/**
 * _abs - computes the absolute value of an integer
 * @ab: integer input
 * Return: absolute value of ab
 */

int _abs(int ab)
{
	return (ab * ((ab > 0) - (ab < 0)));
}
9-strcpy.c/     0           0     0     644     328       `
#include "main.h"

/**
 * *_strcpy - copies string
 * @src: string to be copied
 * @dest: pointer to the buffer
 * Return: dest
 */

char *_strcpy(char *dest, char *src)
{
	int len, i;

	len = 0;

	while (src[len] != '\0')
	{
		len++;
	}

	for (i = 0; i < len; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';

	return (dest);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: the character to print
 *
 * Return: on success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

